;;; extra-imenu.el --- Add extra items into lsp-mode/js2-mode imenu items -*- lexical-binding: t -*-

;; Copyright (C) 2020 Chen Bin <chenbin DOT sh AT gmail DOT com>
;;
;; Version: 0.0.1
;; Keywords: convenience
;; Author: Chen Bin <chenbin DOT sh AT gmail DOT com>
;; URL: https://github.com/redguardtoo/extra-imenu
;; Package-Requires: ((emacs "25.1"))

;; This file is NOT part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;  Add extra imenu items into items generated by lsp-mode, js2-mode, and all
;;  other major/minor modes.
;;
;;  Set up,
;;    At the end of minor/major mode hook, call `extra-imenu-auto-setup' which has
;;    one parameter "patterns".
;;    Patterns should be an alist of the same form as `imenu-generic-expression'.
;;    For example, insert below code to `js2-mode-hook' to extract unit test
;;    cases from javascript code.
;;
;; (add-hook 'js2-mode-hook
;;           (lambda ()
;;             (require 'extra-imenu)
;;             (extra-imenu-auto-setup '(("tdd.it" "^[ \t]*it('\\([^']+\\)" 1)
;;                                       ("tdd.desc" "^[ \t]*describe('\\([^']+\\)" 1))))
;;
;; Usage,
;;   Use imenu as usual.
;;

;;; Code:

(require 'cl-lib)
(require 'imenu)

(defun extra-imenu-line-range (position)
  "Get the line range at POSITION."
  (let (rlt)
    (save-excursion
      (goto-char position)
      (setq rlt (cons (line-beginning-position) (line-end-position))))
    rlt))

(defun extra-imenu-position (item)
  "Get imenu ITEM's position."
  (cond
   ((not item)
    nil)

   ((integerp item)
    item)

   ((markerp item)
    (marker-position item))

   ;; plist
   ((and (listp item) (listp (cdr item)))
    (extra-imenu-position (cadr item)))

   ;; alist
   ((and (listp item) (not (listp (cdr item))))
    (extra-imenu-position (cdr item)))))

(defun extra-imenu-merge-imenu-items (original-items extra-items)
  "Merge ORIGINAL-ITEMS and EXTRA-ITEMS into one imenu items list."
  ;; Clear the lines.
  (cond
   (extra-items
    (let* (ranges)
      ;; Analyze the old imenu items from original imenu backend.
      ;; Only care about line number here.
      (dolist (item original-items)
        (let* ((val (extra-imenu-position item)))
          (when val
            (push (extra-imenu-line-range val) ranges))))

      ;; EXTRA-ITEMS sample:
      ;; ((function ("hello" . #<marker 63>) ("bye" . #<marker 128>))
      ;;  (controller ("MyController" . #<marker 128))
      ;;  (hello . #<marker 161>))
      (append original-items
              (cl-remove-if (lambda (item)
                              (let* ((position (extra-imenu-position item)))
                                (cl-some (lambda (item-range)
                                           (and position
                                                (< position (cdr item-range))
                                                (>= position (car item-range))))
                                         ranges)))
                            extra-items))))

   (t
    original-items)))

;;;###autoload
(defun extra-imenu-auto-setup (patterns)
  "Add extra imenu items extracted from PATTERNS.
PATTERNS should be an alist of the same form as `imenu-generic-expression'."
  (let* ((old-imenu-fn imenu-create-index-function))
    (setq imenu-create-index-function
          (lambda ()
            (extra-imenu-merge-imenu-items (funcall old-imenu-fn)
                                           (save-excursion
                                             (imenu--generic-function patterns)))))))

(provide 'extra-imenu)
;;; extra-imenu.el ends here
